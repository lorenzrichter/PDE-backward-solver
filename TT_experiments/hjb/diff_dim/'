
import xerus as xe
import numpy as np
from scipy import linalg as la
import scipy

class Pol_it:
    def __init__(self, initial_valuefun, ode, polit_params):
        self.v = initial_valuefun
        self.ode = ode
        [self.nos, self.nos_test_set, self.n_sweep, self.rel_val_tol, self.rel_tol, self.max_pol_iter, self.max_iter_Phi, self.horizon] = polit_params
        load_me = np.load('save_me.npy')
        self.interval_half = load_me[2]
        self.t_vec_p = self.v.t_vec_p
        self.t_vec_s = self.ode.t_vec_s
        self.current_time = 0
        self.current_end_time = 0
        self.curr_ind = 0
        self.x0 = np.load('x0.npy')
        self.samples, self.samples_test = self.build_samples(-self.interval_half, self.interval_half)
        self.data_x = self.v.prepare_data_before_opt(self.samples)
        self.constraints_list = self.construct_constraints_list()
        self.c = np.zeros((self.samples.shape[1]))


    def build_samples(self, samples_min, samples_max):
        samples_dim = self.ode.n
        samples_mat = np.zeros(shape=(samples_dim, self.nos, len(self.t_vec_s)))
        samples_mat_test_set = np.zeros(shape=(samples_dim, self.nos_test_set))
        np.random.seed(1)
        for i0 in range(self.nos):
            samples_mat[:, i0, 0] = self.x0
        for i0 in range(self.nos_test_set):
            samples_mat_test_set[:, i0] = np.random.uniform(samples_min, samples_max, samples_dim)

        for i0 in range(samples_mat.shape[2] - 1):
            samples_mat[:, :, i0+1] = self.ode.step(self.t_vec_s[i0], samples_mat[:, :, i0], None)
        print('min, max', np.min(samples_mat), np.max(samples_mat))

        return samples_mat, samples_mat_test_set

    def construct_constraints_list(self):
        # return None
        n = self.ode.n
        xvec = np.zeros(shape=(n, n+1))
        P_list = self.v.P_batch(xvec)
        dP_list = self.v.dP_batch(xvec)
        for i0 in range(n):
            P_list[i0][:,i0] = dP_list[i0][:,i0]
        return P_list

    
    def solve_HJB(self, start_num = None):
        if type(start_num) is not int:
            start_num = len(self.t_vec_p) -2
        xe.save_to_file(self.v.V[len(self.t_vec_p) -1], 'V_{}'.format(str(len(self.t_vec_p) -1)))
        
        for i0 in range(start_num, -1, -1):
            self.curr_ind = i0
            if i0 is not start_num:
                print('set V', i0)
                self.v.V[self.curr_ind] = self.v.V[self.curr_ind+1]
            self.current_time = self.v.t_vec_p[i0]
            ind_end = np.minimum(len(self.t_vec_p) - 1, i0+self.horizon)
            self.current_end_time = self.v.t_vec_p[ind_end]
            print('ind_end', ind_end, 't_start, t_end', self.current_time, self.current_end_time)
            self.solve_HJB_fixed_time()


    def solve_HJB_fixed_time(self):
        rew_MC = self.build_rhs_batch()
        # rew_MC_test = self.build_rhs_batch(self.samples_test)
        data_y = self.v.prepare_data_while_opt(self.current_time, self.samples[:, :, self.curr_ind])
        data = [self.data_x, data_y[0], data_y[1], rew_MC, self.constraints_list]
        params = [self.n_sweep, self.rel_val_tol]
        print('rhs built')
        
        self.v.solve_linear_HJB(data, params)
        xe.save_to_file(self.v.V[self.curr_ind], 'V_{}'.format(str(self.curr_ind)))
        try:
            rel_diff = xe.frob_norm(self.v.V[self.curr_ind] - V_old) / xe.frob_norm(V_old)
        except:
            rel_diff = 1
        # mean_error_test_set = self.calc_mean_error(self.samples_test, y_mat_test, rew_MC_test)
        print('frob_norm(V)', xe.frob_norm(self.v.V[self.curr_ind]))
    
    def calc_mean_error(self, xmat, ymat, rew_MC):
        error = (self.v.eval_V(0, xmat) - self.v.eval_V(0, ymat) - rew_MC)



#         x_vec = np.zeros(shape=(100, n))
#         u_vec = np.zeros(shape=(100, 1))
#         x_vec[0, :] = xmat[:,0]
#         cost = 1/2*self.ode.calc_reward(0, x_vec[0, :], u_vec[0, :])
#         for i0 in range(len(steps)-1):
#             u_vec[i0, :] = _calc_u(x_vec[i0, :], steps[i0])
#             x_vec[i0+1, :] = _step(0, x_vec[i0, :], u_vec[i0, :])
#             add_cost = _calc_cost(0, x_vec[i0, :], u_vec[i0, :])
#             cost += add_cost
#         cost -= add_cost/2
        return np.linalg.norm(error)**2 / rew_MC.size


    def calc_u(self, t, x):
        grad = self.v.calc_grad(t, x)
        return self.ode.calc_u(t, x, grad)

    
    def build_rhs_batch(self):
        # t_points = np.linspace(self.current_time, steps*self.ode.tau, self.current_end_time)
        num_steps = int(np.round((self.current_end_time - self.current_time)/self.ode.tau))
        points = np.linspace(self.ode.t_to_ind(self.current_time), self.ode.t_to_ind(self.current_end_time), num_steps+1)
        print('points', points)
        t_points = np.linspace(self.current_time, self.current_end_time, int((self.current_end_time - self.current_time)/self.ode.tau)+1  )
        print('curr, end, numsteps, int(numsteps)', self.current_time, self.current_end_time, ((self.current_end_time - self.current_time)/self.ode.tau +1 ), int((self.current_end_time - self.current_time)/self.ode.tau) + 1 )
        print('t_points', t_points)


        for i0 in range(int(np.round(points[-1])), int(np.round(points[0])), -1):
            print('i0', i0)
            curr_samples = self.samples[:,:, i0]
            print('curr_samples', curr_samples[:,:5], 'i0', i0)
            curr_g = np.exp(-self.ode.mu*(self.ode.t_vec_s[i0] - self.ode.t_vec_s[int(np.round(points[0]))]))*self.ode.calc_reward(self.ode.t_vec_s[i0], curr_samples)
            print('curr_g', curr_g[:5])
            self.c = np.maximum(curr_g, np.exp(-self.ode.mu*self.ode.tau)*self.c)
            print('c', self.c[:5])
        curr_opt = self.ode.calc_reward(self.ode.t_vec_s[int(np.round(t_points[0]))], curr_samples)
        rew_MC = np.maximum(0, np.exp(-self.ode.mu*self.ode.tau)*self.c)
        self.c = np.maximum(curr_opt, np.exp(-self.ode.mu*self.ode.tau)*self.c)
        print('curr_price', 1/curr_samples.shape[1]*np.sum(self.c))
        print('curr_opt', curr_opt)
        return rew_MC
        




